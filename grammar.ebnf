program → statement* EOF;

statement → empty       |
            expr        |
            block       |
            var_decl    |
            fun_decl    |
            class_decl  |
            print       |
            if          |
            while       |
            for         |
            return      |
            break       |
            continue;


empty   → ";";
expr    → expression ";";
block   → "{" statement* "}";

var_decl    → "var" IDENTIFIER ( "=" expression )? ";";
fun_decl    → "fun" IDENTIFIER "(" parameters? ")" block;
class_decl  → "class" IDENTIFIER "{" (var_decl | function )* "}";

if    → "if" "(" expression ")" statement ("else" statement)?;
while → "while" "(" expression ")" statement;
for   → "for" "(" (var_decl | expr | empty) (expr | empty) expression? ")" statement;

break       → "break" ";";
continue    → "continue" ";";
return      → "return" expression? ";";

print → "print" expression ";";

expression  → assignment;
assignment  → IDENTIFIER ("=" | "+=" | "-=") assignment | equality;
equality    → comparison ( ( "!=" | "==" ) comparison )*;
comparison  → logical ( ( ">" | ">=" | "<" | "<=" ) logical )*;
logical     → term (("and" | "or") term)*;
term        → factor ( ( "-" | "+" ) factor )*;
factor      → unary ( ( "/" | "*" ) unary )*;
unary       → ( "!" | "-" ) unary | call;
call        → primary ( "(" arguments? ")" )*;
primary     → NUMBER | STRING | IDENTIFIER | "true" | "false" | "nil" | "(" expression ")" | lambda;
lambda      → "fun" ("(" parameters? ")")? block;

arguments   → expression ( "," expression )*;
parameters  → IDENTIFIER ( "," IDENTIFIER )*;

NUMBER      → DIGIT+ ( "." DIGIT+ )? ;
STRING      → "\"" <any char except "\"">* "\"" ;
IDENTIFIER  → ALPHA ( ALPHA | DIGIT )* ;
ALPHA       → "a" ... "z" | "A" ... "Z" | "_" ;
DIGIT       → "0" ... "9" ;
